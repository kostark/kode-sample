//生成 Wrapper，供没有安装 Gradle 的开发人员使用。在项目路径下，执行 gradlew 自动下载 Gradle。
task wrapper(type: Wrapper) {
    //定义 gradle 的版本
    gradleVersion = '2.14'

    //配置下载路径 -bin 为二进制文件， -all 包含源代码
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

//Gradle 的构建脚本，该配置用于 Gradle 执行时下载组建和执行的配置
buildscript {

    //配置构建脚本内的常量，和项目内的常量定义不能放在一起定义，因为使用范围不一样。
    ext {
        //在 allprojects 中同样有定义
        springBootVersion = '1.4.0.RELEASE'
    }

    repositories {
        jcenter()
        //maven { url "http://repo.spring.io/snapshot" }
        //maven { url "http://repo.spring.io/milestone" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

//所有项目配置
allprojects {
    group 'kode'
    version '1.0.0'

    //所有项目共同引入的插件
    apply plugin: 'idea'

    //扩展属性，通常用于多子项目时各子项目中属性/版本控制，引用该地方属性的字符不能用 <单引号> 引入这里的变量
    ext {
        springBootVersion = '1.4.0.RELEASE'

        springVersion = '4.3.1.RELEASE'
        springSecurityVersion = '4.0.4.RELEASE'
        hibernateValidation = '5.2.2.Final'
        freemarkerVersion = '2.3.23'
        slf4jVersion = '1.7.21'
        fastjsonVersion = '1.2.7'
        logbackVersion = '1.1.7'
        javaxServletApi = '3.1.0' //javax.servlet:javax.servlet-api
        javaxServletJstl = '1.2' //javax.servlet:jstl
        javaxValidation = '1.1.0.Final' //
        javaxElApi = '2.2.5' //javax.el:el-api
        junitVersion = '4.12'
        mysqlConnector = '5.1.39'
        mybatisVersion = '3.4.1'
        mybatisSpringVersion = '1.3.0'
        druidVersion = '1.0.23'
        eclipseLinkVersion = '2.6.2'
        atomikosVersion = '4.0.1'
    }

    //全局仓库定义
    repositories {
        //本地 maven 仓库
        mavenLocal()

        //配置 OSChina 的 maven 库，现维护不能正常使用
        //maven { url 'http://maven.oschina.net/content/groups/public/' }

        //在使用 spring-boot 后，由于很多依赖来源于 spring 的仓库，所以必须添加。
        //如果没添加将出现 detachedConfiguration1 关键字的异常
        //maven { url "http://repo.spring.io/snapshot" }
        //maven { url "http://repo.spring.io/milestone" }

        //http://jcenter.bintray.com/ 上的仓库，比较全，相对速度比中央仓库快
        jcenter()

        //maven 中央仓库，最全但也最慢
        mavenCentral()
    }
}

//子项目配置
subprojects {

    //子项目使用的插件
    //java 插件使用之后能够在 dependencies 中使用 compile/testCompile 等方法。
    //避免在父模块中使用 java 插件，因为父项目没有必要生成 parent_main 和 parent_test 模块
    apply plugin: 'java'
//    apply plugin: 'spring-boot'

    //apply plugin: 'java' 之后才有属性 - 代码源兼容版本
    sourceCompatibility = JavaVersion.VERSION_1_8
    //apply plugin: 'java' 之后才有属性 - 目标兼容版本
    targetCompatibility = JavaVersion.VERSION_1_8

    //所有项目都需要导入的库
    dependencies {
        compile "org.slf4j:slf4j-api:${slf4jVersion}"
        compile "org.slf4j:jul-to-slf4j:${slf4jVersion}"
        compile "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
        compile "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
        compile "ch.qos.logback:logback-classic:${logbackVersion}"
        testCompile "junit:junit:${junitVersion}"
    }
}

project(":kode-boot-jar") {
    apply plugin: 'spring-boot'
}

//idea 插件配置
idea {
    project {
        //使用 gradle 内枚举常量
        jdkName = JavaVersion.VERSION_1_8
        languageLevel = JavaVersion.VERSION_1_8
    }
}
